/***********************************************************************
 *                                                                     *
 * Test global de la librairie de fonctions de théorie des nombres C++ *
 *                                                                     *
 *                                                                     *
 *                             Pierre Paquay                           *
 *                                                                     *
 ***********************************************************************/

#include "libmparithm++.hpp"
#include <stdio.h>

#define MAXTESTLEN BIGINTMAXBIT
#define RND2 (ulrand64_l() % (MAXTESTLEN + 1))
#define RND1 (ulrand64_l() % (MAXTESTLEN/2 + 1))
#define RND3 (ulrand64_l() % (MAXTESTLEN/4 + 1))

static void testgcd(int);
static void testroot(int);
static void testintroot(int);
static void testchin(int);
static void testprimelt1(void);
static void testprimelt2(int);
static void testprimeprimelt(int);
static USHORT wiener_map(USHORT);


static void testgcd(int nbretest)
{
  largeint a, b, u, v, g, g0;
  int i, usign, vsign;

  cout << "Fonction testgcd()..." << endl;
 
  for (i = 1; i <= nbretest; i++)
    {   
      a = rand64(RND2);
      b = rand64(RND2);
      g = gcd(a, b);
      g0 = xgcd(a, b, u, usign, v, vsign);
      if ((g != g0) || (g != gcd(b, a)) || (g != xgcd(b, a, u, usign, v, vsign)))
	{
	  cerr << "Erreur dans la comparaison de GCD et XGCD," << endl;
	  cerr << "dans le test " << i << " ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if ((g == largeint((USHORT)1)) && (b > largeint((USHORT)1)))
	{
	  if (mulmod(a, invmod(a, b), b) != largeint((USHORT)1))
	    {
	      cerr << "Erreur dans la fonction invmod dans le test " << i << " ligne " << __LINE__ << endl;
	      cerr << "a * a^-1 mod b = " << a * invmod(a, b) % b << endl;
	      exit(-1);
	    }
	}
      a = rand64(RND1);
      b = rand64(RND1);
      g = gcd(a, b);
      g0 = xgcd(a, b, u, usign, v, vsign);
      if ((g != g0) || (g != gcd(b, a)) || (g != xgcd(b, a, u, usign, v, vsign)))
	{
	  cerr << "Erreur dans la comparaison de GCD et XGCD," << endl;
	  cerr << "dans le test " << i << " ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if ((g == largeint((USHORT)1)) && (b > largeint((USHORT)1)))
	{
	  if (a * invmod(a, b) % b != largeint((USHORT)1))
	    {
	      cerr << "Erreur dans la fonction invmod dans le test " << i << " ligne " << __LINE__ << endl;
	      cerr << "a * a^-1 mod b = " << a * invmod(a, b) % b << endl;
	      exit(-1);
	    }
	}
      a = rand64(RND1/2);
      b = rand64(RND1/2);
      g = xgcd(a, b, u, usign, v, vsign);
      a = a * u;
      b = b * v;
      if ((usign == 1) && (vsign == 1))
	a = a + b;
      if ((usign == 1) && (vsign == -1))
	a = a - b;
      if ((usign == -1) && (vsign == 1))
	a = b - a;      
      if ((usign == -1) && (vsign == -1))
	a = largeint((USHORT)0) - b - a;
      if (a != g)
	{
	  cerr << "Erreur dans la fonction invmod dans le test " << i << " ligne " << __LINE__ << endl;
	  exit(-1);
	}
      a = rand64(RND2);
      b = rand64(RND2);
      g = a.gcd(b);
      g0 = a.xgcd(b, u, usign, v, vsign);
      if ((g != g0) || (g != b.gcd(a)) || (g != b.xgcd(a, u, usign, v, vsign)))
	{
	  cerr << "Erreur dans la comparaison de GCD et XGCD," << endl;
	  cerr << "dans le test " << i << " ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if ((g == largeint((USHORT)1)) && (b > largeint((USHORT)1)))
	{
	  if (a.mulmod(a.invmod(b), b) != largeint((USHORT)1))
	    {
	      cerr << "Erreur dans la fonction invmod dans le test " << i << " ligne " << __LINE__ << endl;
	      exit(-1);
	    }
	}
      a = rand64(RND1);
      b = rand64(RND1);
      g = a.gcd(b);
      g0 = a.xgcd(b, u, usign, v, vsign);
      if ((g != g0) || (g != b.gcd(a)) || (g != b.xgcd(a, u, usign, v, vsign)))
	{
	  cerr << "Erreur dans la comparaison de GCD et XGCD," << endl;
	  cerr << "dans le test " << i << " ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if ((g == largeint((USHORT)1)) && (b > largeint((USHORT)1)))
	{
	  if (a * a.invmod(b) % b != largeint((USHORT)1))
	    {
	      cerr << "Erreur dans la fonction invmod dans le test " << i << " ligne " << __LINE__ << endl;
	      exit(-1);
	    }
	}
      a = rand64(RND1/2);
      b = rand64(RND1/2);
      g = a.xgcd(b, u, usign, v, vsign);
      a = a * u;
      b = b * v;
      if ((usign == 1) && (vsign == 1))
	a = a + b;
      if ((usign == 1) && (vsign == -1))
	a = a - b;
      if ((usign == -1) && (vsign == 1))
	a = b - a;      
      if ((usign == -1) && (vsign == -1))
	a = largeint((USHORT)0) - b - a;
      if (a != g)
	{
	  cerr << "Erreur dans la fonction invmod dans le test " << i << " ligne " << __LINE__ << endl;
	  exit(-1);
	}
      
    }
}

static void testroot(int nbretest)
{
  largeint a, p, q, r;
  int i, jp, jq;

  cout << "Fonction testroot()..." << endl;
  
  for (i = 1; i <= nbretest; i++)
    {
      p = prime64(RND1);
      do
	q = prime64(RND1);
      while (q % 4 == p % 4);
      do
	{
	  a = rand64(RND2);
	  jp = a.jacobi(p);
	  r = expmod(a, (p - 1) / 2, p);
	  if (jp < 0)
	    r = r + 1;
	  if (jp > 0)
	    r = r - 1;
	  if (r % p > largeint((USHORT)0))
	    {
	      cerr << "Erreur dans root, ligne " << __LINE__ << endl;
	      exit(-1);
	    }
	  jq = a.jacobi(q);
	  r = expmod(a, (q - 1) / 2, q);
	  if (jq < 0)
	    r = r + 1;
	  if (jq > 0)
	    r = r - 1;
	  if (r % q > largeint((USHORT)0))
	    {
	      cerr << "Erreur dans root, ligne " << __LINE__ << endl;
	      exit(-1);
	    }
	}
      while ((a > p * q) || ((a.jacobi(p) < 1) || (a.jacobi(q) < 1)));
      r = a.root(p, q);
      if ( r == largeint((USHORT)0))
	{
	  cerr << "Erreur dans jacobi, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if (a != r.sqrmod(p * q))
	{
	  cerr << "Erreur dans root, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      do
	{
	  a = rand64(RND2);
	  jp = jacobi(a, p);
	  r = expmod(a, (p - 1) / 2, p);
	  if (jp < 0)
	    r = r + 1;
	  if (jp > 0)
	    r = r - 1;
	  if (r % p > largeint((USHORT)0))
	    {
	      cerr << "Erreur dans root, ligne " << __LINE__ << endl;
	      exit(-1);
	    }
	  jq = jacobi(a, q);
	  r = expmod(a, (q - 1) / 2, q);
	  if (jq < 0)
	    r = r + 1;
	  if (jq > 0)
	    r = r - 1;
	  if (r % q > largeint((USHORT)0))
	    {
	      cerr << "Erreur dans root, ligne " << __LINE__ << endl;
	      exit(-1);
	    }
	}
      while ((a > p * q) || ((jacobi(a, p) < 1) || (jacobi(a, q) < 1)));
      r = root(a, p, q);
      if ( r == largeint((USHORT)0))
	{
	  cerr << "Erreur dans jacobi, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if (a != r.sqrmod(p * q))
	{
	  cerr << "Erreur dans root, ligne " << __LINE__ << endl;
	  exit(-1);
	}
    }
}

static void testintroot(int nbretest)
{
  largeint n, r, q;
  int i;

  cout << "Fonction testintroot()..." << endl;

  n = largeint((USHORT)0);
  q = n * n;
  r = q.issqr();
  if (r != n)
    {
      cerr << "Erreur issqr, ligne " << __LINE__ << endl;
      exit(-1);
    }
  if (q.introot() != n)
    {
      cerr << "Erreur dans root, ligne " << __LINE__ << endl;
      exit(-1);
    }
  for (i = 1; i <= nbretest; i++)
    {
      n = rand64(RND1);
      q = n * n;
      r = q.issqr();
      if ((n > largeint((USHORT)0)) && (r == largeint((USHORT)0)))
	{
	  cerr << "Erreur carré non détecté, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if (r != n)
	{
	  cerr << "Erreur issqr, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if (q.introot() != n)
	{
	  cerr << "Erreur dans root, ligne " << __LINE__ << endl;
	  exit(-1);
	}
    }
  n = largeint((USHORT)0);
  q = n * n;
  r = issqr(q);
  if (r != n)
    {
      cerr << "Erreur issqr, ligne " << __LINE__ << endl;
      exit(-1);
    }
  if (introot(q) != n)
    {
      cerr << "Erreur dans root, ligne " << __LINE__ << endl;
      exit(-1);
    }
  for (i = 1; i <= nbretest; i++)
    {
      n = rand64(RND1);
      q = n * n;
      r = issqr(q);
      if ((n > largeint((USHORT)0)) && (r == largeint((USHORT)0)))
	{
	  cerr << "Erreur carré non détecté, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if (r != n)
	{
	  cerr << "Erreur issqr, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if (introot(q) != n)
	{
	  cerr << "Erreur dans root, ligne " << __LINE__ << endl;
	  exit(-1);
	}
    }
}

static void testchin(int nbretest)
{
  largeint a, b, c, m, n, o, x, y;
  largeint  **coeff = new largeint * [8];
  unsigned int l;
  int i;

  cout << "Fonction testchin()..." << endl;

  coeff[0] = &a;
  coeff[1] = &m;
  coeff[2] = &b;
  coeff[3] = &n;
  coeff[4] = &c;
  coeff[5] = &o;
  for (i = 1; i <= nbretest; i++)
    {
      do
	{
	  l = RND3;
	  m = rand64(l);
	}
      while (m <= largeint((USHORT)10));
      do
	n = rand64(usrand64_l() % l / 3);
      while (gcd(m, n) != largeint((USHORT)1));
      do
	o = rand64(usrand64_l() % l / 3);
      while ((gcd (m, o) != largeint((USHORT)1)) || (gcd (n, o) != largeint((USHORT)1)));
      a = rand64(usrand64_l() % l / 4);
      b = rand64(usrand64_l() % l / 4);
      c = rand64(usrand64_l() % l / 4);
      x = chinrem(3, coeff);
      if ((submod(x, a, m) != largeint((USHORT)0)) || (submod(x, b, n) != largeint((USHORT)0)) || (submod(x, c, o) != largeint((USHORT)0)))
	{
	  cerr << "Erreur ligne " << __LINE__ << endl;
	  cerr << "x = " << x << endl;
	  cerr << "x - a % m = " << (x - a) % m << endl;
	  cerr << "x - b % n = " << (x - b) % b << endl;
	  cerr << "x - c % o = " << (x - c) % o << endl;
	  exit(-1);
	}
      y = a.chinrem(m, b, n);
      if ((submod(y, a, m) != largeint((USHORT)0)) || (submod(y, b, n) != largeint((USHORT)0)))
	{
	  cerr << "Erreur ligne " << __LINE__ << endl;
	  exit(-1);
	}
    }
  delete [] coeff;
}

static int testdata[130][7] = {

  { 3, 2, 1, 2},
  { 5, 2, 1, 2},
  { 7, 3, 2, 2 , 3},
  {11, 2, 2, 2,  5},
  {13, 2, 2, 2,  3},
  {17, 3, 1, 2},
  {19, 2, 2, 2,  3},
  {23, 5, 2, 2, 11},
  {29, 2, 2, 2,  7},
  {31, 3, 3, 2,  3, 5},
  {37, 2, 2, 2,  3},
  {41, 6, 2, 2,  5},
  {43, 3, 3, 2,  3, 7},
  {47, 5, 2, 2, 23},
  {53, 2, 2, 2, 13},
  {59, 2, 2, 2, 29},
  {61, 2, 3, 2, 3, 5},
  {67, 2, 3, 2, 3, 11},
  {71, 7, 3, 2, 5, 7},
  {73, 5, 2, 2, 3},
  {79, 3, 3, 2, 3, 13},
  {83, 2, 2, 2, 41},
  {89, 3, 2, 2, 11},
  {97, 5, 2, 2, 3},
  {101, 2, 2, 2, 5},
  {103, 5, 3, 2, 3, 17},
  {107, 2, 2, 2, 53},
  {109, 6, 2, 2, 3},
  {113, 3, 2, 2, 7},
  {127, 3, 3, 2, 3, 7},
  {131, 2, 3, 2, 5, 13},
  {137, 3, 2, 2, 17},
  {139, 2, 3, 2, 3, 23},
  {149, 2, 2, 2, 39},
  {151, 6, 3, 2, 3, 5},
  {157, 5, 3, 2, 3, 13},
  {163, 2, 2, 2, 3},
  {167, 5, 2, 2, 83},
  {173, 2, 2, 2, 43},
  {179, 2, 2, 2, 89},
  {181, 2, 3, 2, 3, 5},
  {191, 19, 3, 2, 5, 19},
  {193, 5, 2, 2, 3},
  {197, 2, 2, 2, 7},
  {199, 3, 3, 2, 3, 11},
  {211, 2, 4, 2, 3, 5, 7},
  {223, 3, 3, 2, 3, 37},
  {227, 2, 2, 2, 113},
  {229, 6, 3, 2, 3, 19},
  {233, 3, 2, 2, 29},
  {239, 7, 3, 2, 7, 17},
  {241, 7, 3, 2, 3, 5},
  {251, 6, 2, 2, 5},
  {257, 3, 1, 2},
  {263, 5, 2, 2, 131},
  {269, 2, 2, 2, 67},
  {271, 6, 3, 2, 3, 5},
  {277, 5, 3, 2, 3, 23},
  {281, 3, 3, 2, 5, 7},
  {283, 3, 3, 2, 3, 47},
  {293, 2, 2, 2, 73},
  {307, 5, 3, 2, 3, 17},
  {311, 17, 3, 2, 5, 31},
  {313, 10, 3, 2, 3, 13},
  {317, 2, 2, 2, 79},
  {331, 3, 4, 2, 3, 5, 11},
  {337, 10, 3, 2, 3, 7},
  {347, 2, 2, 2, 173},
  {349, 2, 3, 2, 3, 29},
  {353, 3, 2, 2, 11},
  {359, 7, 2, 2, 179},
  {367, 6, 3, 2, 3, 61},
  {373, 2, 3, 2, 3, 31},
  {379, 2, 3, 2, 3, 7},
  {383, 5, 2, 2, 191},
  {389, 2, 2, 2, 97},
  {397, 5, 3, 2, 3, 11},
  {401, 3, 2, 2, 5},
  {409, 21, 3, 2, 3, 17},
  {419, 2, 3, 2, 11, 19},
  {421, 2, 4, 2, 3, 5, 7},
  {431, 7, 3, 2, 5, 43},
  {433, 5, 2, 2, 3},
  {439, 15, 3, 2, 3, 73},
  {443, 2, 3, 2, 13, 17},
  {449, 3, 2, 2, 7},
  {457, 13, 3, 2, 3, 19},
  {461, 2, 3, 2, 5, 23},
  {463, 3, 4, 2, 3, 7, 11},
  {467, 2, 2, 2, 233},
  {479, 13, 2, 2, 239},
  {487, 3, 2, 2, 3},
  {491, 2, 3, 2, 5, 7},
  {499, 7, 3, 2, 3, 83},
  {503, 5, 2, 2, 251},
  {509, 2, 2, 2, 127},
  {521, 3, 3, 2, 5, 13},
  {523, 2, 2, 2, 29},
  {541, 2, 3, 2, 3, 5},
  {547, 2, 3, 2, 3, 7, 13},
  {557, 2, 2, 2, 139},
  {563, 2, 2, 2, 281},
  {569, 3, 2, 2, 71},
  {571, 3, 4, 2, 3, 5, 19},
  {577, 5, 2, 2, 3},
  {587, 2, 2, 2, 293},
  {593, 3, 2, 2, 37},
  {599, 7, 3, 2, 13, 23},
  {601, 7, 3, 2, 3, 5},
  {613, 2, 3, 2, 3, 17},
  {617, 3, 3, 2, 7, 11},
  {619, 2, 3, 2, 3, 103},
  {631, 3, 3, 2, 3, 5, 7},
  {641, 3, 2, 2, 5},
  {643, 11, 3, 2, 3, 107},
  {647, 5, 3, 2, 17, 19},
  {653, 2, 2, 2, 163},
  {659, 2, 3, 2, 7, 47},
  {661, 2, 4, 2, 3, 5, 11},
  {673, 5, 3, 2, 3, 7},
  {677, 2, 2, 2, 13},
  {683, 5, 3, 2, 11, 31},
  {691, 3, 4, 2, 3, 5, 23},
  {701, 2, 3, 2, 5, 7},
  {709, 2, 3, 2, 3, 59},
  {719, 11, 2, 2, 359},
  {727, 5, 3, 2, 3, 11},
  {733, 6, 3, 2, 3, 61},
  {739, 3, 3, 2, 3, 41},
  {743, 5, 3, 2, 7, 53}
};

static void testprimelt1(void)
{
  largeint a;
  int test, i;
  
  cout << "Fonction testprimelt1()..." << endl;

  /*largeint **primes = new largeint* [2];
  primes[0] = new largeint((USHORT)2);
  primes[1] = new largeint((USHORT)2);

  a = primelt(1, primes);*/

  for (test = 5; test < 130; test++)
    {
      largeint **primes = new largeint* [testdata[test][2] + 1];
      primes[0] = new largeint((USHORT)(testdata[test][0] - 1));
      for (i = 1; i <= testdata[test][2]; i++)
	primes[i] = new largeint((USHORT)testdata[test][2 + i]);
      a = primelt(testdata[test][2], primes);
      if (a < largeint((USHORT)0))
	{
	  cerr << "Erreur, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      largeint u = expmod(a, *primes[0] - 1, *primes[0] + 1);
      largeint v = expmod(a, *primes[0], *primes[0] + 1);
      if (!(u != largeint((USHORT)1) && v == largeint((USHORT)1)))
	{
	  cerr << "Erreur, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      /*if (a != largeint((USHORT)testdata[test][1]))
	{
	  cerr << "Erreur, ligne " << __LINE__ << endl;
	  exit(-1);
	}*/
      for (i = 0; i <= testdata[test][2]; i++)
	delete primes[i];
      delete [] primes;
    }
}

USHORT  smallp[6542] =
{   2, 1, 2, 2, 4, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2,
    6, 4, 6, 8, 4, 2, 4, 2, 4, 14, 4, 6, 2, 10, 2, 6, 6, 4, 6, 6,
    2, 10, 2, 4, 2, 12, 12, 4, 2, 4, 6, 2, 10, 6, 6, 6, 2, 6, 4, 2,
    10, 14, 4, 2, 4, 14, 6, 10, 2, 4, 6, 8, 6, 6, 4, 6, 8, 4, 8, 10,
    2, 10, 2, 6, 4, 6, 8, 4, 2, 4, 12, 8, 4, 8, 4, 6, 12, 2, 18, 6,
    10, 6, 6, 2, 6, 10, 6, 6, 2, 6, 6, 4, 2, 12, 10, 2, 4, 6, 6, 2,
    12, 4, 6, 8, 10, 8, 10, 8, 6, 6, 4, 8, 6, 4, 8, 4, 14, 10, 12, 2,
    10, 2, 4, 2, 10, 14, 4, 2, 4, 14, 4, 2, 4, 20, 4, 8, 10, 8, 4, 6,
    6, 14, 4, 6, 6, 8, 6, 12, 4, 6, 2, 10, 2, 6, 10, 2, 10, 2, 6, 18,
    4, 2, 4, 6, 6, 8, 6, 6, 22, 2, 10, 8, 10, 6, 6, 8, 12, 4, 6, 6,
    2, 6, 12, 10, 18, 2, 4, 6, 2, 6, 4, 2, 4, 12, 2, 6, 34, 6, 6, 8,
    18, 10, 14, 4, 2, 4, 6, 8, 4, 2, 6, 12, 10, 2, 4, 2, 4, 6, 12, 12,
    8, 12, 6, 4, 6, 8, 4, 8, 4, 14, 4, 6, 2, 4, 6, 2, 6, 10, 20, 6,
    4, 2, 24, 4, 2, 10, 12, 2, 10, 8, 6, 6, 6, 18, 6, 4, 2, 12, 10, 12,
    8, 16, 14, 6, 4, 2, 4, 2, 10, 12, 6, 6, 18, 2, 16, 2, 22, 6, 8, 6,
    4, 2, 4, 8, 6, 10, 2, 10, 14, 10, 6, 12, 2, 4, 2, 10, 12, 2, 16, 2,
    6, 4, 2, 10, 8, 18, 24, 4, 6, 8, 16, 2, 4, 8, 16, 2, 4, 8, 6, 6,
    4, 12, 2, 22, 6, 2, 6, 4, 6, 14, 6, 4, 2, 6, 4, 6, 12, 6, 6, 14,
    4, 6, 12, 8, 6, 4, 26, 18, 10, 8, 4, 6, 2, 6, 22, 12, 2, 16, 8, 4,
    12, 14, 10, 2, 4, 8, 6, 6, 4, 2, 4, 6, 8, 4, 2, 6, 10, 2, 10, 8,
    4, 14, 10, 12, 2, 6, 4, 2, 16, 14, 4, 6, 8, 6, 4, 18, 8, 10, 6, 6,
    8, 10, 12, 14, 4, 6, 6, 2, 28, 2, 10, 8, 4, 14, 4, 8, 12, 6, 12, 4,
    6, 20, 10, 2, 16, 26, 4, 2, 12, 6, 4, 12, 6, 8, 4, 8, 22, 2, 4, 2,
    12, 28, 2, 6, 6, 6, 4, 6, 2, 12, 4, 12, 2, 10, 2, 16, 2, 16, 6, 20,
    16, 8, 4, 2, 4, 2, 22, 8, 12, 6, 10, 2, 4, 6, 2, 6, 10, 2, 12, 10,
    2, 10, 14, 6, 4, 6, 8, 6, 6, 16, 12, 2, 4, 14, 6, 4, 8, 10, 8, 6,
    6, 22, 6, 2, 10, 14, 4, 6, 18, 2, 10, 14, 4, 2, 10, 14, 4, 8, 18, 4,
    6, 2, 4, 6, 2, 12, 4, 20, 22, 12, 2, 4, 6, 6, 2, 6, 22, 2, 6, 16,
    6, 12, 2, 6, 12, 16, 2, 4, 6, 14, 4, 2, 18, 24, 10, 6, 2, 10, 2, 10,
    2, 10, 6, 2, 10, 2, 10, 6, 8, 30, 10, 2, 10, 8, 6, 10, 18, 6, 12, 12,
    2, 18, 6, 4, 6, 6, 18, 2, 10, 14, 6, 4, 2, 4, 24, 2, 12, 6, 16, 8,
    6, 6, 18, 16, 2, 4, 6, 2, 6, 6, 10, 6, 12, 12, 18, 2, 6, 4, 18, 8,
    24, 4, 2, 4, 6, 2, 12, 4, 14, 30, 10, 6, 12, 14, 6, 10, 12, 2, 4, 6,
    8, 6, 10, 2, 4, 14, 6, 6, 4, 6, 2, 10, 2, 16, 12, 8, 18, 4, 6, 12,
    2, 6, 6, 6, 28, 6, 14, 4, 8, 10, 8, 12, 18, 4, 2, 4, 24, 12, 6, 2,
    16, 6, 6, 14, 10, 14, 4, 30, 6, 6, 6, 8, 6, 4, 2, 12, 6, 4, 2, 6,
    22, 6, 2, 4, 18, 2, 4, 12, 2, 6, 4, 26, 6, 6, 4, 8, 10, 32, 16, 2,
    6, 4, 2, 4, 2, 10, 14, 6, 4, 8, 10, 6, 20, 4, 2, 6, 30, 4, 8, 10,
    6, 6, 8, 6, 12, 4, 6, 2, 6, 4, 6, 2, 10, 2, 16, 6, 20, 4, 12, 14,
    28, 6, 20, 4, 18, 8, 6, 4, 6, 14, 6, 6, 10, 2, 10, 12, 8, 10, 2, 10,
    8, 12, 10, 24, 2, 4, 8, 6, 4, 8, 18, 10, 6, 6, 2, 6, 10, 12, 2, 10,
    6, 6, 6, 8, 6, 10, 6, 2, 6, 6, 6, 10, 8, 24, 6, 22, 2, 18, 4, 8,
    10, 30, 8, 18, 4, 2, 10, 6, 2, 6, 4, 18, 8, 12, 18, 16, 6, 2, 12, 6,
    10, 2, 10, 2, 6, 10, 14, 4, 24, 2, 16, 2, 10, 2, 10, 20, 4, 2, 4, 8,
    16, 6, 6, 2, 12, 16, 8, 4, 6, 30, 2, 10, 2, 6, 4, 6, 6, 8, 6, 4,
    12, 6, 8, 12, 4, 14, 12, 10, 24, 6, 12, 6, 2, 22, 8, 18, 10, 6, 14, 4,
    2, 6, 10, 8, 6, 4, 6, 30, 14, 10, 2, 12, 10, 2, 16, 2, 18, 24, 18, 6,
    16, 18, 6, 2, 18, 4, 6, 2, 10, 8, 10, 6, 6, 8, 4, 6, 2, 10, 2, 12,
    4, 6, 6, 2, 12, 4, 14, 18, 4, 6, 20, 4, 8, 6, 4, 8, 4, 14, 6, 4,
    14, 12, 4, 2, 30, 4, 24, 6, 6, 12, 12, 14, 6, 4, 2, 4, 18, 6, 12, 8,
    6, 4, 12, 2, 12, 30, 16, 2, 6, 22, 14, 6, 10, 12, 6, 2, 4, 8, 10, 6,
    6, 24, 14, 6, 4, 8, 12, 18, 10, 2, 10, 2, 4, 6, 20, 6, 4, 14, 4, 2,
    4, 14, 6, 12, 24, 10, 6, 8, 10, 2, 30, 4, 6, 2, 12, 4, 14, 6, 34, 12,
    8, 6, 10, 2, 4, 20, 10, 8, 16, 2, 10, 14, 4, 2, 12, 6, 16, 6, 8, 4,
    8, 4, 6, 8, 6, 6, 12, 6, 4, 6, 6, 8, 18, 4, 20, 4, 12, 2, 10, 6,
    2, 10, 12, 2, 4, 20, 6, 30, 6, 4, 8, 10, 12, 6, 2, 28, 2, 6, 4, 2,
    16, 12, 2, 6, 10, 8, 24, 12, 6, 18, 6, 4, 14, 6, 4, 12, 8, 6, 12, 4,
    6, 12, 6, 12, 2, 16, 20, 4, 2, 10, 18, 8, 4, 14, 4, 2, 6, 22, 6, 14,
    6, 6, 10, 6, 2, 10, 2, 4, 2, 22, 2, 4, 6, 6, 12, 6, 14, 10, 12, 6,
    8, 4, 36, 14, 12, 6, 4, 6, 2, 12, 6, 12, 16, 2, 10, 8, 22, 2, 12, 6,
    4, 6, 18, 2, 12, 6, 4, 12, 8, 6, 12, 4, 6, 12, 6, 2, 12, 12, 4, 14,
    6, 16, 6, 2, 10, 8, 18, 6, 34, 2, 28, 2, 22, 6, 2, 10, 12, 2, 6, 4,
    8, 22, 6, 2, 10, 8, 4, 6, 8, 4, 12, 18, 12, 20, 4, 6, 6, 8, 4, 2,
    16, 12, 2, 10, 8, 10, 2, 4, 6, 14, 12, 22, 8, 28, 2, 4, 20, 4, 2, 4,
    14, 10, 12, 2, 12, 16, 2, 28, 8, 22, 8, 4, 6, 6, 14, 4, 8, 12, 6, 6,
    4, 20, 4, 18, 2, 12, 6, 4, 6, 14, 18, 10, 8, 10, 32, 6, 10, 6, 6, 2,
    6, 16, 6, 2, 12, 6, 28, 2, 10, 8, 16, 6, 8, 6, 10, 24, 20, 10, 2, 10,
    2, 12, 4, 6, 20, 4, 2, 12, 18, 10, 2, 10, 2, 4, 20, 16, 26, 4, 8, 6,
    4, 12, 6, 8, 12, 12, 6, 4, 8, 22, 2, 16, 14, 10, 6, 12, 12, 14, 6, 4,
    20, 4, 12, 6, 2, 6, 6, 16, 8, 22, 2, 28, 8, 6, 4, 20, 4, 12, 24, 20,
    4, 8, 10, 2, 16, 2, 12, 12, 34, 2, 4, 6, 12, 6, 6, 8, 6, 4, 2, 6,
    24, 4, 20, 10, 6, 6, 14, 4, 6, 6, 2, 12, 6, 10, 2, 10, 6, 20, 4, 26,
    4, 2, 6, 22, 2, 24, 4, 6, 2, 4, 6, 24, 6, 8, 4, 2, 34, 6, 8, 16,
    12, 2, 10, 2, 10, 6, 8, 4, 8, 12, 22, 6, 14, 4, 26, 4, 2, 12, 10, 8,
    4, 8, 12, 4, 14, 6, 16, 6, 8, 4, 6, 6, 8, 6, 10, 12, 2, 6, 6, 16,
    8, 6, 6, 12, 10, 2, 6, 18, 4, 6, 6, 6, 12, 18, 8, 6, 10, 8, 18, 4,
    14, 6, 18, 10, 8, 10, 12, 2, 6, 12, 12, 36, 4, 6, 8, 4, 6, 2, 4, 18,
    12, 6, 8, 6, 6, 4, 18, 2, 4, 2, 24, 4, 6, 6, 14, 30, 6, 4, 6, 12,
    6, 20, 4, 8, 4, 8, 6, 6, 4, 30, 2, 10, 12, 8, 10, 8, 24, 6, 12, 4,
    14, 4, 6, 2, 28, 14, 16, 2, 12, 6, 4, 20, 10, 6, 6, 6, 8, 10, 12, 14,
    10, 14, 16, 14, 10, 14, 6, 16, 6, 8, 6, 16, 20, 10, 2, 6, 4, 2, 4, 12,
    2, 10, 2, 6, 22, 6, 2, 4, 18, 8, 10, 8, 22, 2, 10, 18, 14, 4, 2, 4,
    18, 2, 4, 6, 8, 10, 2, 30, 4, 30, 2, 10, 2, 18, 4, 18, 6, 14, 10, 2,
    4, 20, 36, 6, 4, 6, 14, 4, 20, 10, 14, 22, 6, 2, 30, 12, 10, 18, 2, 4,
    14, 6, 22, 18, 2, 12, 6, 4, 8, 4, 8, 6, 10, 2, 12, 18, 10, 14, 16, 14,
    4, 6, 6, 2, 6, 4, 2, 28, 2, 28, 6, 2, 4, 6, 14, 4, 12, 14, 16, 14,
    4, 6, 8, 6, 4, 6, 6, 6, 8, 4, 8, 4, 14, 16, 8, 6, 4, 12, 8, 16,
    2, 10, 8, 4, 6, 26, 6, 10, 8, 4, 6, 12, 14, 30, 4, 14, 22, 8, 12, 4,
    6, 8, 10, 6, 14, 10, 6, 2, 10, 12, 12, 14, 6, 6, 18, 10, 6, 8, 18, 4,
    6, 2, 6, 10, 2, 10, 8, 6, 6, 10, 2, 18, 10, 2, 12, 4, 6, 8, 10, 12,
    14, 12, 4, 8, 10, 6, 6, 20, 4, 14, 16, 14, 10, 8, 10, 12, 2, 18, 6, 12,
    10, 12, 2, 4, 2, 12, 6, 4, 8, 4, 44, 4, 2, 4, 2, 10, 12, 6, 6, 14,
    4, 6, 6, 6, 8, 6, 36, 18, 4, 6, 2, 12, 6, 6, 6, 4, 14, 22, 12, 2,
    18, 10, 6, 26, 24, 4, 2, 4, 2, 4, 14, 4, 6, 6, 8, 16, 12, 2, 42, 4,
    2, 4, 24, 6, 6, 2, 18, 4, 14, 6, 28, 18, 14, 6, 10, 12, 2, 6, 12, 30,
    6, 4, 6, 6, 14, 4, 2, 24, 4, 6, 6, 26, 10, 18, 6, 8, 6, 6, 30, 4,
    12, 12, 2, 16, 2, 6, 4, 12, 18, 2, 6, 4, 26, 12, 6, 12, 4, 24, 24, 12,
    6, 2, 12, 28, 8, 4, 6, 12, 2, 18, 6, 4, 6, 6, 20, 16, 2, 6, 6, 18,
    10, 6, 2, 4, 8, 6, 6, 24, 16, 6, 8, 10, 6, 14, 22, 8, 16, 6, 2, 12,
    4, 2, 22, 8, 18, 34, 2, 6, 18, 4, 6, 6, 8, 10, 8, 18, 6, 4, 2, 4,
    8, 16, 2, 12, 12, 6, 18, 4, 6, 6, 6, 2, 6, 12, 10, 20, 12, 18, 4, 6,
    2, 16, 2, 10, 14, 4, 30, 2, 10, 12, 2, 24, 6, 16, 8, 10, 2, 12, 22, 6,
    2, 16, 20, 10, 2, 12, 12, 18, 10, 12, 6, 2, 10, 2, 6, 10, 18, 2, 12, 6,
    4, 6, 2, 24, 28, 2, 4, 2, 10, 2, 16, 12, 8, 22, 2, 6, 4, 2, 10, 6,
    20, 12, 10, 8, 12, 6, 6, 6, 4, 18, 2, 4, 12, 18, 2, 12, 6, 4, 2, 16,
    12, 12, 14, 4, 8, 18, 4, 12, 14, 6, 6, 4, 8, 6, 4, 20, 12, 10, 14, 4,
    2, 16, 2, 12, 30, 4, 6, 24, 20, 24, 10, 8, 12, 10, 12, 6, 12, 12, 6, 8,
    16, 14, 6, 4, 6, 36, 20, 10, 30, 12, 2, 4, 2, 28, 12, 14, 6, 22, 8, 4,
    18, 6, 14, 18, 4, 6, 2, 6, 34, 18, 2, 16, 6, 18, 2, 24, 4, 2, 6, 12,
    6, 12, 10, 8, 6, 16, 12, 8, 10, 14, 40, 6, 2, 6, 4, 12, 14, 4, 2, 4,
    2, 4, 8, 6, 10, 6, 6, 2, 6, 6, 6, 12, 6, 24, 10, 2, 10, 6, 12, 6,
    6, 14, 6, 6, 52, 20, 6, 10, 2, 10, 8, 10, 12, 12, 2, 6, 4, 14, 16, 8,
    12, 6, 22, 2, 10, 8, 6, 22, 2, 22, 6, 8, 10, 12, 12, 2, 10, 6, 12, 2,
    4, 14, 10, 2, 6, 18, 4, 12, 8, 18, 12, 6, 6, 4, 6, 6, 14, 4, 2, 12,
    12, 4, 6, 18, 18, 12, 2, 16, 12, 8, 18, 10, 26, 4, 6, 8, 6, 6, 4, 2,
    10, 20, 4, 6, 8, 4, 20, 10, 2, 34, 2, 4, 24, 2, 12, 12, 10, 6, 2, 12,
    30, 6, 12, 16, 12, 2, 22, 18, 12, 14, 10, 2, 12, 12, 4, 2, 4, 6, 12, 2,
    16, 18, 2, 40, 8, 16, 6, 8, 10, 2, 4, 18, 8, 10, 8, 12, 4, 18, 2, 18,
    10, 2, 4, 2, 4, 8, 28, 2, 6, 22, 12, 6, 14, 18, 4, 6, 8, 6, 6, 10,
    8, 4, 2, 18, 10, 6, 20, 22, 8, 6, 30, 4, 2, 4, 18, 6, 30, 2, 4, 8,
    6, 4, 6, 12, 14, 34, 14, 6, 4, 2, 6, 4, 14, 4, 2, 6, 28, 2, 4, 6,
    8, 10, 2, 10, 2, 10, 2, 4, 30, 2, 12, 12, 10, 18, 12, 14, 10, 2, 12, 6,
    10, 6, 14, 12, 4, 14, 4, 18, 2, 10, 8, 4, 8, 10, 12, 18, 18, 8, 6, 18,
    16, 14, 6, 6, 10, 14, 4, 6, 2, 12, 12, 4, 6, 6, 12, 2, 16, 2, 12, 6,
    4, 14, 6, 4, 2, 12, 18, 4, 36, 18, 12, 12, 2, 4, 2, 4, 8, 12, 4, 36,
    6, 18, 2, 12, 10, 6, 12, 24, 8, 6, 6, 16, 12, 2, 18, 10, 20, 10, 2, 6,
    18, 4, 2, 40, 6, 2, 16, 2, 4, 8, 18, 10, 12, 6, 2, 10, 8, 4, 6, 12,
    2, 10, 18, 8, 6, 4, 20, 4, 6, 36, 6, 2, 10, 6, 24, 6, 14, 16, 6, 18,
    2, 10, 20, 10, 8, 6, 4, 6, 2, 10, 2, 12, 4, 2, 4, 8, 10, 6, 12, 18,
    14, 12, 16, 8, 6, 16, 8, 4, 2, 6, 18, 24, 18, 10, 12, 2, 4, 14, 10, 6,
    6, 6, 18, 12, 2, 28, 18, 14, 16, 12, 14, 24, 12, 22, 6, 2, 10, 8, 4, 2,
    4, 14, 12, 6, 4, 6, 14, 4, 2, 4, 30, 6, 2, 6, 10, 2, 30, 22, 2, 4,
    6, 8, 6, 6, 16, 12, 12, 6, 8, 4, 2, 24, 12, 4, 6, 8, 6, 6, 10, 2,
    6, 12, 28, 14, 6, 4, 12, 8, 6, 12, 4, 6, 14, 6, 12, 10, 6, 6, 8, 6,
    6, 4, 2, 4, 8, 12, 4, 14, 18, 10, 2, 16, 6, 20, 6, 10, 8, 4, 30, 36,
    12, 8, 22, 12, 2, 6, 12, 16, 6, 6, 2, 18, 4, 26, 4, 8, 18, 10, 8, 10,
    6, 14, 4, 20, 22, 18, 12, 8, 28, 12, 6, 6, 8, 6, 12, 24, 16, 14, 4, 14,
    12, 6, 10, 12, 20, 6, 4, 8, 18, 12, 18, 10, 2, 4, 20, 10, 14, 4, 6, 2,
    10, 24, 18, 2, 4, 20, 16, 14, 10, 14, 6, 4, 6, 20, 6, 10, 6, 2, 12, 6,
    30, 10, 8, 6, 4, 6, 8, 40, 2, 4, 2, 12, 18, 4, 6, 8, 10, 6, 18, 18,
    2, 12, 16, 8, 6, 4, 6, 6, 2, 52, 14, 4, 20, 16, 2, 4, 6, 12, 2, 6,
    12, 12, 6, 4, 14, 10, 6, 6, 14, 10, 14, 16, 8, 6, 12, 4, 8, 22, 6, 2,
    18, 22, 6, 2, 18, 6, 16, 14, 10, 6, 12, 2, 6, 4, 8, 18, 12, 16, 2, 4,
    14, 4, 8, 12, 12, 30, 16, 8, 4, 2, 6, 22, 12, 8, 10, 6, 6, 6, 14, 6,
    18, 10, 12, 2, 10, 2, 4, 26, 4, 12, 8, 4, 18, 8, 10, 14, 16, 6, 6, 8,
    10, 6, 8, 6, 12, 10, 20, 10, 8, 4, 12, 26, 18, 4, 12, 18, 6, 30, 6, 8,
    6, 22, 12, 2, 4, 6, 6, 2, 10, 2, 4, 6, 6, 2, 6, 22, 18, 6, 18, 12,
    8, 12, 6, 10, 12, 2, 16, 2, 10, 2, 10, 18, 6, 20, 4, 2, 6, 22, 6, 6,
    18, 6, 14, 12, 16, 2, 6, 6, 4, 14, 12, 4, 2, 18, 16, 36, 12, 6, 14, 28,
    2, 12, 6, 12, 6, 4, 2, 16, 30, 8, 24, 6, 30, 10, 2, 18, 4, 6, 12, 8,
    22, 2, 6, 22, 18, 2, 10, 2, 10, 30, 2, 28, 6, 14, 16, 6, 20, 16, 2, 6,
    4, 32, 4, 2, 4, 6, 2, 12, 4, 6, 6, 12, 2, 6, 4, 6, 8, 6, 4, 20,
    4, 32, 10, 8, 16, 2, 22, 2, 4, 6, 8, 6, 16, 14, 4, 18, 8, 4, 20, 6,
    12, 12, 6, 10, 2, 10, 2, 12, 28, 12, 18, 2, 18, 10, 8, 10, 48, 2, 4, 6,
    8, 10, 2, 10, 30, 2, 36, 6, 10, 6, 2, 18, 4, 6, 8, 16, 14, 16, 6, 14,
    4, 20, 4, 6, 2, 10, 12, 2, 6, 12, 6, 6, 4, 12, 2, 6, 4, 12, 6, 8,
    4, 2, 6, 18, 10, 6, 8, 12, 6, 22, 2, 6, 12, 18, 4, 14, 6, 4, 20, 6,
    16, 8, 4, 8, 22, 8, 12, 6, 6, 16, 12, 18, 30, 8, 4, 2, 4, 6, 26, 4,
    14, 24, 22, 6, 2, 6, 10, 6, 14, 6, 6, 12, 10, 6, 2, 12, 10, 12, 8, 18,
    18, 10, 6, 8, 16, 6, 6, 8, 16, 20, 4, 2, 10, 2, 10, 12, 6, 8, 6, 10,
    20, 10, 18, 26, 4, 6, 30, 2, 4, 8, 6, 12, 12, 18, 4, 8, 22, 6, 2, 12,
    34, 6, 18, 12, 6, 2, 28, 14, 16, 14, 4, 14, 12, 4, 6, 6, 2, 36, 4, 6,
    20, 12, 24, 6, 22, 2, 16, 18, 12, 12, 18, 2, 6, 6, 6, 4, 6, 14, 4, 2,
    22, 8, 12, 6, 10, 6, 8, 12, 18, 12, 6, 10, 2, 22, 14, 6, 6, 4, 18, 6,
    20, 22, 2, 12, 24, 4, 18, 18, 2, 22, 2, 4, 12, 8, 12, 10, 14, 4, 2, 18,
    16, 38, 6, 6, 6, 12, 10, 6, 12, 8, 6, 4, 6, 14, 30, 6, 10, 8, 22, 6,
    8, 12, 10, 2, 10, 2, 6, 10, 2, 10, 12, 18, 20, 6, 4, 8, 22, 6, 6, 30,
    6, 14, 6, 12, 12, 6, 10, 2, 10, 30, 2, 16, 8, 4, 2, 6, 18, 4, 2, 6,
    4, 26, 4, 8, 6, 10, 2, 4, 6, 8, 4, 6, 30, 12, 2, 6, 6, 4, 20, 22,
    8, 4, 2, 4, 72, 8, 4, 8, 22, 2, 4, 14, 10, 2, 4, 20, 6, 10, 18, 6,
    20, 16, 6, 8, 6, 4, 20, 12, 22, 2, 4, 2, 12, 10, 18, 2, 22, 6, 18, 30,
    2, 10, 14, 10, 8, 16, 50, 6, 10, 8, 10, 12, 6, 18, 2, 22, 6, 2, 4, 6,
    8, 6, 6, 10, 18, 2, 22, 2, 16, 14, 10, 6, 2, 12, 10, 20, 4, 14, 6, 4,
    36, 2, 4, 6, 12, 2, 4, 14, 12, 6, 4, 6, 2, 6, 4, 20, 10, 2, 10, 6,
    12, 2, 24, 12, 12, 6, 6, 4, 24, 2, 4, 24, 2, 6, 4, 6, 8, 16, 6, 2,
    10, 12, 14, 6, 34, 6, 14, 6, 4, 2, 30, 22, 8, 4, 6, 8, 4, 2, 28, 2,
    6, 4, 26, 18, 22, 2, 6, 16, 6, 2, 16, 12, 2, 12, 4, 6, 6, 14, 10, 6,
    8, 12, 4, 18, 2, 10, 8, 16, 6, 6, 30, 2, 10, 18, 2, 10, 8, 4, 8, 12,
    24, 40, 2, 12, 10, 6, 12, 2, 12, 4, 2, 4, 6, 18, 14, 12, 6, 4, 14, 30,
    4, 8, 10, 8, 6, 10, 18, 8, 4, 14, 16, 6, 8, 4, 6, 2, 10, 2, 12, 4,
    2, 4, 6, 8, 4, 6, 32, 24, 10, 8, 18, 10, 2, 6, 10, 2, 4, 18, 6, 12,
    2, 16, 2, 22, 6, 6, 8, 18, 4, 18, 12, 8, 6, 4, 20, 6, 30, 22, 12, 2,
    6, 18, 4, 62, 4, 2, 12, 6, 10, 2, 12, 12, 28, 2, 4, 14, 22, 6, 2, 6,
    6, 10, 14, 4, 2, 10, 6, 8, 10, 14, 10, 6, 2, 12, 22, 18, 8, 10, 18, 12,
    2, 12, 4, 12, 2, 10, 2, 6, 18, 6, 6, 34, 6, 2, 12, 4, 6, 18, 18, 2,
    16, 6, 6, 8, 6, 10, 18, 8, 10, 8, 10, 2, 4, 18, 26, 12, 22, 2, 4, 2,
    22, 6, 6, 14, 16, 6, 20, 10, 12, 2, 18, 42, 4, 24, 2, 6, 10, 12, 2, 6,
    10, 8, 4, 6, 12, 12, 8, 4, 6, 12, 30, 20, 6, 24, 6, 10, 12, 2, 10, 20,
    6, 6, 4, 12, 14, 10, 18, 12, 8, 6, 12, 4, 14, 10, 2, 12, 30, 16, 2, 12,
    6, 4, 2, 4, 6, 26, 4, 18, 2, 4, 6, 14, 54, 6, 52, 2, 16, 6, 6, 12,
    26, 4, 2, 6, 22, 6, 2, 12, 12, 6, 10, 18, 2, 12, 12, 10, 18, 12, 6, 8,
    6, 10, 6, 8, 4, 2, 4, 20, 24, 6, 6, 10, 14, 10, 2, 22, 6, 14, 10, 26,
    4, 18, 8, 12, 12, 10, 12, 6, 8, 16, 6, 8, 6, 6, 22, 2, 10, 20, 10, 6,
    44, 18, 6, 10, 2, 4, 6, 14, 4, 26, 4, 2, 12, 10, 8, 4, 8, 12, 4, 12,
    8, 22, 8, 6, 10, 18, 6, 6, 8, 6, 12, 4, 8, 18, 10, 12, 6, 12, 2, 6,
    4, 2, 16, 12, 12, 14, 10, 14, 6, 10, 12, 2, 12, 6, 4, 6, 2, 12, 4, 26,
    6, 18, 6, 10, 6, 2, 18, 10, 8, 4, 26, 10, 20, 6, 16, 20, 12, 10, 8, 10,
    2, 16, 6, 20, 10, 20, 4, 30, 2, 4, 8, 16, 2, 18, 4, 2, 6, 10, 18, 12,
    14, 18, 6, 16, 20, 6, 4, 8, 6, 4, 6, 12, 8, 10, 2, 12, 6, 4, 2, 6,
    10, 2, 16, 12, 14, 10, 6, 8, 6, 28, 2, 6, 18, 30, 34, 2, 16, 12, 2, 18,
    16, 6, 8, 10, 8, 10, 8, 10, 44, 6, 6, 4, 20, 4, 2, 4, 14, 28, 8, 6,
    16, 14, 30, 6, 30, 4, 14, 10, 6, 6, 8, 4, 18, 12, 6, 2, 22, 12, 8, 6,
    12, 4, 14, 4, 6, 2, 4, 18, 20, 6, 16, 38, 16, 2, 4, 6, 2, 40, 42, 14,
    4, 6, 2, 24, 10, 6, 2, 18, 10, 12, 2, 16, 2, 6, 16, 6, 8, 4, 2, 10,
    6, 8, 10, 2, 18, 16, 8, 12, 18, 12, 6, 12, 10, 6, 6, 18, 12, 14, 4, 2,
    10, 20, 6, 12, 6, 16, 26, 4, 18, 2, 4, 32, 10, 8, 6, 4, 6, 6, 14, 6,
    18, 4, 2, 18, 10, 8, 10, 8, 10, 2, 4, 6, 2, 10, 42, 8, 12, 4, 6, 18,
    2, 16, 8, 4, 2, 10, 14, 12, 10, 20, 4, 8, 10, 38, 4, 6, 2, 10, 20, 10,
    12, 6, 12, 26, 12, 4, 8, 28, 8, 4, 8, 24, 6, 10, 8, 6, 16, 12, 8, 10,
    12, 8, 22, 6, 2, 10, 2, 6, 10, 6, 6, 8, 6, 4, 14, 28, 8, 16, 18, 8,
    4, 6, 20, 4, 18, 6, 2, 24, 24, 6, 6, 12, 12, 4, 2, 22, 2, 10, 6, 8,
    12, 4, 20, 18, 6, 4, 12, 24, 6, 6, 54, 8, 6, 4, 26, 36, 4, 2, 4, 26,
    12, 12, 4, 6, 6, 8, 12, 10, 2, 12, 16, 18, 6, 8, 6, 12, 18, 10, 2, 54,
    4, 2, 10, 30, 12, 8, 4, 8, 16, 14, 12, 6, 4, 6, 12, 6, 2, 4, 14, 12,
    4, 14, 6, 24, 6, 6, 10, 12, 12, 20, 18, 6, 6, 16, 8, 4, 6, 20, 4, 32,
    4, 14, 10, 2, 6, 12, 16, 2, 4, 6, 12, 2, 10, 8, 6, 4, 2, 10, 14, 6,
    6, 12, 18, 34, 8, 10, 6, 24, 6, 2, 10, 12, 2, 30, 10, 14, 12, 12, 16, 6,
    6, 2, 18, 4, 6, 30, 14, 4, 6, 6, 2, 6, 4, 6, 14, 6, 4, 8, 10, 12,
    6, 32, 10, 8, 22, 2, 10, 6, 24, 8, 4, 30, 6, 2, 12, 16, 8, 6, 4, 6,
    8, 16, 14, 6, 6, 4, 2, 10, 12, 2, 16, 14, 4, 2, 4, 20, 18, 10, 2, 10,
    6, 12, 30, 8, 18, 12, 10, 2, 6, 6, 4, 12, 12, 2, 4, 12, 18, 24, 2, 10,
    6, 8, 16, 8, 6, 12, 10, 14, 6, 12, 6, 6, 4, 2, 24, 4, 6, 8, 6, 4,
    2, 4, 6, 14, 4, 8, 10, 24, 24, 12, 2, 6, 12, 22, 30, 2, 6, 18, 10, 6,
    6, 8, 4, 2, 6, 10, 8, 10, 6, 8, 16, 6, 14, 6, 4, 24, 8, 10, 2, 12,
    6, 4, 36, 2, 22, 6, 8, 6, 10, 8, 6, 12, 10, 14, 10, 6, 18, 12, 2, 12,
    4, 26, 10, 14, 16, 18, 8, 18, 12, 12, 6, 16, 14, 24, 10, 12, 8, 22, 6, 2,
    10, 60, 6, 2, 4, 8, 16, 14, 10, 6, 24, 6, 12, 18, 24, 2, 30, 4, 2, 12,
    6, 10, 2, 4, 14, 6, 16, 2, 10, 8, 22, 20, 6, 4, 32, 6, 18, 4, 2, 4,
    2, 4, 8, 52, 14, 22, 2, 22, 20, 10, 8, 10, 2, 6, 4, 14, 4, 6, 20, 4,
    6, 2, 12, 12, 6, 12, 16, 2, 12, 10, 8, 4, 6, 2, 28, 12, 8, 10, 12, 2,
    4, 14, 28, 8, 6, 4, 2, 4, 6, 2, 12, 58, 6, 14, 10, 2, 6, 28, 32, 4,
    30, 8, 6, 4, 6, 12, 12, 2, 4, 6, 6, 14, 16, 8, 30, 4, 2, 10, 8, 6,
    4, 6, 26, 4, 12, 2, 10, 18, 12, 12, 18, 2, 4, 12, 8, 12, 10, 20, 4, 8,
    16, 12, 8, 6, 16, 8, 10, 12, 14, 6, 4, 8, 12, 4, 20, 6, 40, 8, 16, 6,
    36, 2, 6, 4, 6, 2, 22, 18, 2, 10, 6, 36, 14, 12, 4, 18, 8, 4, 14, 10,
    2, 10, 8, 4, 2, 18, 16, 12, 14, 10, 14, 6, 6, 42, 10, 6, 6, 20, 10, 8,
    12, 4, 12, 18, 2, 10, 14, 18, 10, 18, 8, 6, 4, 14, 6, 10, 30, 14, 6, 6,
    4, 12, 38, 4, 2, 4, 6, 8, 12, 10, 6, 18, 6, 50, 6, 4, 6, 12, 8, 10,
    32, 6, 22, 2, 10, 12, 18, 2, 6, 4, 30, 8, 6, 6, 18, 10, 2, 4, 12, 20,
    10, 8, 24, 10, 2, 6, 22, 6, 2, 18, 10, 12, 2, 30, 18, 12, 28, 2, 6, 4,
    6, 14, 6, 12, 10, 8, 4, 12, 26, 10, 8, 6, 16, 2, 10, 18, 14, 6, 4, 6,
    14, 16, 2, 6, 4, 12, 20, 4, 20, 4, 6, 12, 2, 36, 4, 6, 2, 10, 2, 22,
    8, 6, 10, 12, 12, 18, 14, 24, 36, 4, 20, 24, 10, 6, 2, 28, 6, 18, 8, 4,
    6, 8, 6, 4, 2, 12, 28, 18, 14, 16, 14, 18, 10, 8, 6, 4, 6, 6, 8, 22,
    12, 2, 10, 18, 6, 2, 18, 10, 2, 12, 10, 18, 32, 6, 4, 6, 6, 8, 6, 6,
    10, 20, 6, 12, 10, 8, 10, 14, 6, 10, 14, 4, 2, 22, 18, 2, 10, 2, 4, 20,
    4, 2, 34, 2, 12, 6, 10, 2, 10, 18, 6, 14, 12, 12, 22, 8, 6, 16, 6, 8,
    4, 12, 6, 8, 4, 36, 6, 6, 20, 24, 6, 12, 18, 10, 2, 10, 26, 6, 16, 8,
    6, 4, 24, 18, 8, 12, 12, 10, 18, 12, 2, 24, 4, 12, 18, 12, 14, 10, 2, 4,
    24, 12, 14, 10, 6, 2, 6, 4, 6, 26, 4, 6, 6, 2, 22, 8, 18, 4, 18, 8,
    4, 24, 2, 12, 12, 4, 2, 52, 2, 18, 6, 4, 6, 12, 2, 6, 12, 10, 8, 4,
    2, 24, 10, 2, 10, 2, 12, 6, 18, 40, 6, 20, 16, 2, 12, 6, 10, 12, 2, 4,
    6, 14, 12, 12, 22, 6, 8, 4, 2, 16, 18, 12, 2, 6, 16, 6, 2, 6, 4, 12,
    30, 8, 16, 2, 18, 10, 24, 2, 6, 24, 4, 2, 22, 2, 16, 2, 6, 12, 4, 18,
    8, 4, 14, 4, 18, 24, 6, 2, 6, 10, 2, 10, 38, 6, 10, 14, 6, 6, 24, 4,
    2, 12, 16, 14, 16, 12, 2, 6, 10, 26, 4, 2, 12, 6, 4, 12, 8, 12, 10, 18,
    6, 14, 28, 2, 6, 10, 2, 4, 14, 34, 2, 6, 22, 2, 10, 14, 4, 2, 16, 8,
    10, 6, 8, 10, 8, 4, 6, 2, 16, 6, 6, 18, 30, 14, 6, 4, 30, 2, 10, 14,
    4, 20, 10, 8, 4, 8, 18, 4, 14, 6, 4, 24, 6, 6, 18, 18, 2, 36, 6, 10,
    14, 12, 4, 6, 2, 30, 6, 4, 2, 6, 28, 20, 4, 20, 12, 24, 16, 18, 12, 14,
    6, 4, 12, 32, 12, 6, 10, 8, 10, 6, 18, 2, 16, 14, 6, 22, 6, 12, 2, 18,
    4, 8, 30, 12, 4, 12, 2, 10, 38, 22, 2, 4, 14, 6, 12, 24, 4, 2, 4, 14,
    12, 10, 2, 16, 6, 20, 4, 20, 22, 12, 2, 4, 2, 12, 22, 24, 6, 6, 2, 6,
    4, 6, 2, 10, 12, 12, 6, 2, 6, 16, 8, 6, 4, 18, 12, 12, 14, 4, 12, 6,
    8, 6, 18, 6, 10, 12, 14, 6, 4, 8, 22, 6, 2, 28, 18, 2, 18, 10, 6, 14,
    10, 2, 10, 14, 6, 10, 2, 22, 6, 8, 6, 16, 12, 8, 22, 2, 4, 14, 18, 12,
    6, 24, 6, 10, 2, 12, 22, 18, 6, 20, 6, 10, 14, 4, 2, 6, 12, 22, 14, 12,
    4, 6, 8, 22, 2, 10, 12, 8, 40, 2, 6, 10, 8, 4, 42, 20, 4, 32, 12, 10,
    6, 12, 12, 2, 10, 8, 6, 4, 8, 4, 26, 18, 4, 8, 28, 6, 18, 6, 12, 2,
    10, 6, 6, 14, 10, 12, 14, 24, 6, 4, 20, 22, 2, 18, 4, 6, 12, 2, 16, 18,
    14, 6, 6, 4, 6, 8, 18, 4, 14, 30, 4, 18, 8, 10, 2, 4, 8, 12, 4, 12,
    18, 2, 12, 10, 2, 16, 8, 4, 30, 2, 6, 28, 2, 10, 2, 18, 10, 14, 4, 26,
    6, 18, 4, 20, 6, 4, 8, 18, 4, 12, 26, 24, 4, 20, 22, 2, 18, 22, 2, 4,
    12, 2, 6, 6, 6, 4, 6, 14, 4, 24, 12, 6, 18, 2, 12, 28, 14, 4, 6, 8,
    22, 6, 12, 18, 8, 4, 20, 6, 4, 6, 2, 18, 6, 4, 12, 12, 8, 28, 6, 8,
    10, 2, 24, 12, 10, 24, 8, 10, 20, 12, 6, 12, 12, 4, 14, 12, 24, 34, 18, 8,
    10, 6, 18, 8, 4, 8, 16, 14, 6, 4, 6, 24, 2, 6, 4, 6, 2, 16, 6, 6,
    20, 24, 4, 2, 4, 14, 4, 18, 2, 6, 12, 4, 14, 4, 2, 18, 16, 6, 6, 2,
    16, 20, 6, 6, 30, 4, 8, 6, 24, 16, 6, 6, 8, 12, 30, 4, 18, 18, 8, 4,
    26, 10, 2, 22, 8, 10, 14, 6, 4, 18, 8, 12, 28, 2, 6, 4, 12, 6, 24, 6,
    8, 10, 20, 16, 8, 30, 6, 6, 4, 2, 10, 14, 6, 10, 32, 22, 18, 2, 4, 2,
    4, 8, 22, 8, 18, 12, 28, 2, 16, 12, 18, 14, 10, 18, 12, 6, 32, 10, 14, 6,
    10, 2, 10, 2, 6, 22, 2, 4, 6, 8, 10, 6, 14, 6, 4, 12, 30, 24, 6, 6,
    8, 6, 4, 2, 4, 6, 8, 6, 6, 22, 18, 8, 4, 2, 18, 6, 4, 2, 16, 18,
    20, 10, 6, 6, 30, 2, 12, 28, 6, 6, 6, 2, 12, 10, 8, 18, 18, 4, 8, 18,
    10, 2, 28, 2, 10, 14, 4, 2, 30, 12, 22, 26, 10, 8, 6, 10, 8, 16, 14, 6,
    6, 10, 14, 6, 4, 2, 10, 12, 2, 6, 10, 8, 4, 2, 10, 26, 22, 6, 2, 12,
    18, 4, 26, 4, 8, 10, 6, 14, 10, 2, 18, 6, 10, 20, 6, 6, 4, 24, 2, 4,
    8, 6, 16, 14, 16, 18, 2, 4, 12, 2, 10, 2, 6, 12, 10, 6, 6, 20, 6, 4,
    6, 38, 4, 6, 12, 14, 4, 12, 8, 10, 12, 12, 8, 4, 6, 14, 10, 6, 12, 2,
    10, 18, 2, 18, 10, 8, 10, 2, 12, 4, 14, 28, 2, 16, 2, 18, 6, 10, 6, 8,
    16, 14, 30, 10, 20, 6, 10, 24, 2, 28, 2, 12, 16, 6, 8, 36, 4, 8, 4, 14,
    12, 10, 8, 12, 4, 6, 8, 4, 6, 14, 22, 8, 6, 4, 2, 10, 6, 20, 10, 8,
    6, 6, 22, 18, 2, 16, 6, 20, 4, 26, 4, 14, 22, 14, 4, 12, 6, 8, 4, 6,
    6, 26, 10, 2, 18, 18, 4, 2, 16, 2, 18, 4, 6, 8, 4, 6, 12, 2, 6, 6,
    28, 38, 4, 8, 16, 26, 4, 2, 10, 12, 2, 10, 8, 6, 10, 12, 2, 10, 2, 24,
    4, 30, 26, 6, 6, 18, 6, 6, 22, 2, 10, 18, 26, 4, 18, 8, 6, 6, 12, 16,
    6, 8, 16, 6, 8, 16, 2, 42, 58, 8, 4, 6, 2, 4, 8, 16, 6, 20, 4, 12,
    12, 6, 12, 2, 10, 2, 6, 22, 2, 10, 6, 8, 6, 10, 14, 6, 6, 4, 18, 8,
    10, 8, 16, 14, 10, 2, 10, 2, 12, 6, 4, 20, 10, 8, 52, 8, 10, 6, 2, 10,
    8, 10, 6, 6, 8, 10, 2, 22, 2, 4, 6, 14, 4, 2, 24, 12, 4, 26, 18, 4,
    6, 14, 30, 6, 4, 6, 2, 22, 8, 4, 6, 2, 22, 6, 8, 16, 6, 14, 4, 6,
    18, 8, 12, 6, 12, 24, 30, 16, 8, 34, 8, 22, 6, 14, 10, 18, 14, 4, 12, 8,
    4, 36, 6, 6, 2, 10, 2, 4, 20, 6, 6, 10, 12, 6, 2, 40, 8, 6, 28, 6,
    2, 12, 18, 4, 24, 14, 6, 6, 10, 20, 10, 14, 16, 14, 16, 6, 8, 36, 4, 12,
    12, 6, 12, 50, 12, 6, 4, 6, 6, 8, 6, 10, 2, 10, 2, 18, 10, 14, 16, 8,
    6, 4, 20, 4, 2, 10, 6, 14, 18, 10, 38, 10, 18, 2, 10, 2, 12, 4, 2, 4,
    14, 6, 10, 8, 40, 6, 20, 4, 12, 8, 6, 34, 8, 22, 8, 12, 10, 2, 16, 42,
    12, 8, 22, 8, 22, 8, 6, 34, 2, 6, 4, 14, 6, 16, 2, 22, 6, 8, 24, 22,
    6, 2, 12, 4, 6, 14, 4, 8, 24, 4, 6, 6, 2, 22, 20, 6, 4, 14, 4, 6,
    6, 8, 6, 10, 6, 8, 6, 16, 14, 6, 6, 22, 6, 24, 32, 6, 18, 6, 18, 10,
    8, 30, 18, 6, 16, 12, 6, 12, 2, 6, 4, 12, 8, 6, 22, 8, 6, 4, 14, 10,
    18, 20, 10, 2, 6, 4, 2, 28, 18, 2, 10, 6, 6, 6, 14, 40, 24, 2, 4, 8,
    12, 4, 20, 4, 32, 18, 16, 6, 36, 8, 6, 4, 6, 14, 4, 6, 26, 6, 10, 14,
    18, 10, 6, 6, 14, 10, 6, 6, 14, 6, 24, 4, 14, 22, 8, 12, 10, 8, 12, 18,
    10, 18, 8, 24, 10, 8, 4, 24, 6, 18, 6, 2, 10, 30, 2, 10, 2, 4, 2, 40,
    2, 28, 8, 6, 6, 18, 6, 10, 14, 4, 18, 30, 18, 2, 12, 30, 6, 30, 4, 18,
    12, 2, 4, 14, 6, 10, 6, 8, 6, 10, 12, 2, 6, 12, 10, 2, 18, 4, 20, 4,
    6, 14, 6, 6, 22, 6, 6, 8, 18, 18, 10, 2, 10, 2, 6, 4, 6, 12, 18, 2,
    10, 8, 4, 18, 2, 6, 6, 6, 10, 8, 10, 6, 18, 12, 8, 12, 6, 4, 6, 14,
    16, 2, 12, 4, 6, 38, 6, 6, 16, 20, 28, 20, 10, 6, 6, 14, 4, 26, 4, 14,
    10, 18, 14, 28, 2, 4, 14, 16, 2, 28, 6, 8, 6, 34, 8, 4, 18, 2, 16, 8,
    6, 40, 8, 18, 4, 30, 6, 12, 2, 30, 6, 10, 14, 40, 14, 10, 2, 12, 10, 8,
    4, 8, 6, 6, 28, 2, 4, 12, 14, 16, 8, 30, 16, 18, 2, 10, 18, 6, 32, 4,
    18, 6, 2, 12, 10, 18, 2, 6, 10, 14, 18, 28, 6, 8, 16, 2, 4, 20, 10, 8,
    18, 10, 2, 10, 8, 4, 6, 12, 6, 20, 4, 2, 6, 4, 20, 10, 26, 18, 10, 2,
    18, 6, 16, 14, 4, 26, 4, 14, 10, 12, 14, 6, 6, 4, 14, 10, 2, 30, 18, 22, 2};

static void testprimelt2(int nbretest)
{
  largeint p, q, u, a, t;
  largeint **primes = new largeint *[10];
  USHORT sp;
  int i, j, l;

  cout << "Fonction testprimelt2()..." << endl;

  for (i = 1; i <= nbretest; i++)
    {
      do
	l = RND1 % 256;
      while (l == 0);
      p = prime64(l);
      do
	l = RND1 % 256;
      while (l == 0);
      u = prime64(l);
      t = p * u << 1;
      sp = 2;
      j = 1;
      do
	{
	  sp = sp + smallp[j];
	  j = j + 1;
	  q = t * sp + 1;
	}
      while (MRprime(q, 312, 5) == 0);
      q = q - 1;
      primes[0] = &q;
      primes[1] = &p;
      primes[2] = &u;
      largeint two = largeint((USHORT)2);
      primes[3] = &two;
      largeint smallp(sp);
      primes[4] = &smallp;
      a = primelt(4, primes);
      if (a < largeint((USHORT)0))
	{
	  cerr << "Erreur, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      u = expmod(a, q - 1, q + 1);
      t = expmod(a, q, q + 1);
      if (!(u != largeint((USHORT)1) && t == largeint((USHORT)1)))
	{
	  cerr << "Erreur, ligne " << __LINE__ << endl;
	  exit(-1);
	}
    }
  delete [] primes;
}

static USHORT wiener_map(USHORT n)
{
  static struct { USHORT p_n, q_n; } t[] =
    {	/*   p	  q	 attack cost */
      {  512, 119 },	/* 9 x 10^17 */
      {  768, 145 },	/* 6 x 10^21 */
      { 1024, 165 },	/* 7 x 10^24 */
      { 1280, 183 },	/* 3 x 10^27 */
      { 1536, 198 },	/* 7 x 10^29 */
      { 1792, 212 },	/* 9 x 10^31 */
      { 2048, 225 },	/* 8 x 10^33 */
      { 2304, 237 },	/* 5 x 10^35 */
      { 2560, 249 },	/* 3 x 10^37 */
      { 2816, 259 },	/* 1 x 10^39 */
      { 3072, 269 },	/* 3 x 10^40 */
      { 3328, 279 },	/* 8 x 10^41 */
      { 3584, 288 },	/* 2 x 10^43 */
      { 3840, 296 },	/* 4 x 10^44 */
      { 4096, 305 },	/* 7 x 10^45 */
      { 4352, 313 },	/* 1 x 10^47 */
      { 4608, 320 },	/* 2 x 10^48 */
      { 4864, 328 },	/* 2 x 10^49 */
      { 5120, 335 },	/* 3 x 10^50 */
      { 0, 0 }
    };
  int i;

  for(i = 0; t[i].p_n; i++)
    {
      if (n <= t[i].p_n)
	return t[i].q_n;
    }
  /* not in table - use some arbitrary high number ;-) */
  return  (n / 8 + 200);
}

static void testprimeprimelt(int nbretest)
{
  largeint p, g, t, u, q;
  USHORT l, qbits;
  int i;

  cout << "Fonction testprimeprimelt()..." << endl;

  for (i = 1; i <= nbretest; i++)
    {
      do
	l = RND3;
      while (l < 512);
      qbits = wiener_map(l);
      p = elgamalprime(l, qbits, g);

      //cout << "p = " << largeint_Dec << p << endl;
      //cout << "g = " << largeint_Dec << g << endl;

      if (MRprime(p, 312, 5) == 0)
	{
	  cerr << "Erreur, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      if (g < largeint((USHORT)0))
	{
	  cerr << "Erreur, ligne " << __LINE__ << endl;
	  exit(-1);
	}
      u = expmod(g, p - 2, p);
      t = expmod(g, p - 1, p);
      if (!(u != largeint((USHORT)1) && t == largeint((USHORT)1)))
	{
	  cerr << "Erreur, ligne " << __LINE__ << endl;
	  exit(-1);
	}
    }
}
	  
      
      

int main()
{
  cout << "Module de test pour la librairie de théorie des nombres C++, " << __FILE__ << endl;

  seed64(time(NULL));
  seedBBS(time(NULL));

#ifndef SECURE
  testgcd(500);
  testroot(2);
  testintroot(1000);
  testchin(1000);
  testprimelt1();
  testprimelt2(1);
  testprimeprimelt(50);
#else
  testgcd(50);
  testroot(1);
  testintroot(100);
  testchin(100);
  testprimelt1();
  testprimelt2(1);
  testprimeprimelt(5);
#endif

  cout << "Tous les tests du fichier " << __FILE__ << " effectués." << endl;

  return 0;
}

